# Версия git
git --version

# Регистрация для возможности работы с репозиториями комиты и тд и тп

git config --global user.name "GRVSA Alex"
git config --global user.email grvsa1980@gmail.com

#список установленых параметров
git config --list

#положение конфигурационного файла git
git config --list --show-origin

C:\Users\pavlikov\.gitconfig

#git следит только за специально установленой папкой на диске
#создать проект
git init
#либо клонировать
git clone

C:\Users\pavlikov>cd c:\

c:\>cd dj

c:\dj>dir
 Том в устройстве C не имеет метки.
 Серийный номер тома: 887A-B653

 Содержимое папки c:\dj

22.06.2022  13:34    <DIR>          .
22.06.2022  13:34    <DIR>          ..
15.06.2022  16:47             1 222 django_help.txt
15.06.2022  15:26    <DIR>          fp
22.06.2022  13:42               682 git_help.txt
15.06.2022  15:12    <DIR>          Include
15.06.2022  15:12    <DIR>          Lib
15.06.2022  15:12               122 pyvenv.cfg
15.06.2022  15:13    <DIR>          Scripts
               3 файлов          2 026 байт
               6 папок  306 479 542 272 байт свободно

c:\dj>git init
Initialized empty Git repository in C:/dj/.git/

#создали файл help.txt - добавляем его в репозиторий из консоли
git add .

# точка '.' означает добавить всё - можно добавлять отдельные файлы

git add help2.txt

#делаем коммит !!! кавычки двойные !!!! "" - одинарные не работают
git commit -m "первый коммит"

#изменили help.txt
git add help.txt
git commit
#выскочит консольный редактор с комментариями и статусом коммита

#изменение дефолтного редактора - главное что бы по названию запускался из консоли
#тобишь наверное можно забить просто путь до файла ???
git config --global core.editor notepad

#клонируем удаленный репозиторий - объект та же папка куда git init сделали
#после пути к репозиторию можно указать директорию куда клонировать

git clone https://github.com/grvsa/snake.git snk

#статус репозитория - показывает все измененные файлы которые не прошли коммит

git status

#файлы в репозитории могут быть остлеживаемые и неотслеживаемые
#git status будет показывать все - но git commit будут только остлеживаемые
#добавление в отслеживаемые через git add видимо

#сокращенный вывод статуса
git status -s

c:\dj>git status -s
 M git_help.txt #модифицированый отслеживаемый файл
 M help.txt     #модифицированый отслеживаемый файл
?? readme.txt   #неотслеживаемый не добавлен через git add

c:\dj>git status -s
 M git_help.txt
 M help.txt
 D help2.txt    #удаленный отслеживаемый файл
?? readme.txt


#просмотр изменений в измененных файлах ВЫХОД ЧЕРЕЗ "q" когда <END>
git diff

-----------------------------------------------------------------------------
c:\dj>git diff
diff --git a/git_help.txt b/git_help.txt
index f022603..7b610b4 100644
--- a/git_help.txt
+++ b/git_help.txt
@@ -76,3 +76,21 @@ git status
 #файлы в репозитории могут быть остлеживаемые и неотслеживаемые
 #git status будет показывать все - но git commit будут только остлеживаемые
 #добавление в отслеживаемые через git add видимо
+
+#сокращенный вывод статуса
+git status -s
+
+c:\dj>git status -s
+ M git_help.txt #модифицированый отслеживаемый файл
+ M help.txt     #модифицированый отслеживаемый файл
+?? readme.txt   #неотслеживаемый не добавлен через git add
+
+c:\dj>git status -s
+ M git_help.txt
+ M help.txt
+ D help2.txt    #удаленный отслеживаемый файл
+?? readme.txt
+
+
+#просмотр изменений в измененных файлах
+git diff
diff --git a/help.txt b/help.txt
index f328f0c..c28628e 100644
--- a/help.txt
+++ b/help.txt
@@ -1,3 +1,5 @@
 change some information

 add more info - commit 2
+
+New line for traced files
diff --git a/help2.txt b/help2.txt
deleted file mode 100644
index 4e0cee8..0000000
--- a/help2.txt
+++ /dev/null
@@ -1 +0,0 @@
-sdsdhkljlwj
(END)
+ M help.txt     #модифицированый отслеживаемый файл
+?? readme.txt   #неотслеживаемый не добавлен через git add
+
+c:\dj>git status -s
+ M git_help.txt
+ M help.txt
+ D help2.txt    #удаленный отслеживаемый файл
+?? readme.txt
+
+
+#просмотр изменений в измененных файлах
+git diff
diff --git a/help.txt b/help.txt
index f328f0c..c28628e 100644
--- a/help.txt
+++ b/help.txt
@@ -1,3 +1,5 @@
 change some information

 add more info - commit 2
+
+New line for traced files
diff --git a/help2.txt b/help2.txt
deleted file mode 100644
index 4e0cee8..0000000
--- a/help2.txt
+++ /dev/null
@@ -1 +0,0 @@
-sdsdhkljlwj

c:\dj>
-----------------------------------------------------------------------------

#git diff показывает изменения которые еще не попали в индекс ! через git add
#тобишь если их добавить в индекс но не делать коммит - git diff ничего не покажет
#в этом случае можно посмотреть индекс кэша

git diff --cached


#git diff показывает добавленые строки с '+' а убраные строки с '-'
----------------------------------------------------------------------------
diff --git a/help.txt b/help.txt
index c28628e..da3af33 100644
--- a/help.txt
+++ b/help.txt
@@ -1,5 +1,4 @@
 change some information

-add more info - commit 2                                             #удалены

 New line for traced files

c:\dj>git diff
diff --git a/git_help.txt b/git_help.txt
index 039c6e7..72f6088 100644
--- a/git_help.txt
+++ b/git_help.txt
@@ -179,3 +179,6 @@ c:\dj>
 #в этом случае можно посмотреть индекс кэша

 git diff --cached
+                                                                     #добавлены
+                                                                     #добавлены
+#git diff показывает добавленые строки с '+' а убраные строки с '-'  #добавлены
diff --git a/help.txt b/help.txt
index c28628e..da3af33 100644
--- a/help.txt
+++ b/help.txt
@@ -1,5 +1,4 @@
 change some information

-add more info - commit 2

 New line for traced files

 ----------------------------------------------------------------------------

#git commit -am "Comment" - позволяет добавлять сразу в индекс и в коммит

git commit -am "7th"

#откат изменений на непроиндексированых файлах - походу оба работают
git checkout -- file.name
git restore file.name

#откат изменений в файлах уже внесенных в индекс на коммит git add file.name

git reset HEAD help.txt
git restore --staged help.txt

#после этого можем через restore или checkout убрать изменения
#ВНИМАНИЕ !!! откат до СТАБИЛЬНОГО состояния
#тоесть 2 изменения внесенные последовательно в индекс без коммита
#УДАЛЯТЬСЯ ОБА !




#git log - история коммитов #- количество коммитов --stat - p
git log
git log -2          #только 2 последних коммита
git log -2 -p       #полная информация по коммиту
git log -2 --stat   #краткая информация по измененным файлам для коммитов
git log --pretty=oneline      #еще более красивый вывод - в одну линию

#по факту --pretty это строка форматирования =oneline это пресет
#можно задать свою строку форматирования

git log --pretty=format:"%h - %an, %ar : %s"


---------------------------------------------------------------------
oneline:
eeff8d24059c920f09731ed0cf27b574e604d4f6 (HEAD -> master) Delete from Index to remove modification
f1b9de7e672ac50142a117cdec711b23510a6c0c 7th commit
70957e0eada9f2dfcd4227ae29392dc4391b223e OK ! 6th
e1ddde79ccc3a28c08c9229d8298dfdc54a23780 Update git_help.txt
ea0021c764b504c77501c44a3ebc93c25cac0e2e Commit 4th
44930306b4ea6c3b44c2abc4e425667b50e74d36 Final commit 3rd
f6cd415b7454550da090290ae859effc9dd64c9c Эназер коммит ! смена редактора получилась !!!
5e2aeca4898030e9f9ec764e28a84463bc9596bf Comment
539206585d6fe0517b623386464974406a6325cc Первый коммит

format:"%h - %an, %ar : %s":

eeff8d2 - GRVSA Alex, 20 minutes ago : Delete from Index to remove modification
f1b9de7 - GRVSA Alex, 36 minutes ago : 7th commit
70957e0 - GRVSA Alex, 43 minutes ago : OK ! 6th
e1ddde7 - GRVSA Alex, 75 minutes ago : Update git_help.txt
ea0021c - GRVSA Alex, 88 minutes ago : Commit 4th
4493030 - GRVSA Alex, 2 hours ago : Final commit 3rd
f6cd415 - GRVSA Alex, 2 hours ago : Эназер коммит ! смена редактора получилась !!!
5e2aeca - GRVSA Alex, 2 hours ago : Comment
5392065 - GRVSA Alex, 2 hours ago : Первый коммит

--------------------------------------------------------------------

#Хэш сумма коммита по SHA1 - 40 символов к коммиту можно обратиться по хэшу
539206585d6fe0517b623386464974406a6325cc
5392065  #сокращенный хэш - при выводе сокращается до той длины пока он все еще
#отличается от существующих хэш


#git log - коммиты за определенное время

git log --since=2.week #все коммиты в течении 2 недель
git log --until=1.week #все коммиты до за неделю назад

git log --since=1.hour #все коммиты в течении 1 часа последнего
git log --until=1.hour #все коммиты сделаные до 1 часа назад

#за период
git log --since=2019-03-01 --until=2019-03-02

#найти коммиты в которых изменена определенная строка: параметр -S строка Git
git log -SGit -p

#коммиты по автору

git log --author="GRVSA Alex"

#найти автора и коммит который менял что либо .... ХЗ надо детально тестить

git blame help.txt

5e2aeca4 (GRVSA Alex 2022-06-22 13:53:53 +0300 1) change some information
f6cd415b (GRVSA Alex 2022-06-22 13:59:29 +0300 2)
f1b9de7e (GRVSA Alex 2022-06-22 15:19:34 +0300 3) Ееще один изменение
70957e0e (GRVSA Alex 2022-06-22 15:12:48 +0300 4) New line for traced files

#Игнорирование файлов - суть вот в чем:
#если однажды файл попал в репозиторий он по факту останется там навсегда
#в истории изменений.
#таким образом даже если он удален - он все равно там тоесть
#и при клонировании репозитория он будет в любом случае выгружен опять
#мелкие файлы ОК но большие - проблема
#решение .gitignore - ФАЙЛ СОЗДАЕТСЯ САМОСТОЯТЕЛЬНО !
#туда вносятся фильтры

gitignore.io -сайт для создания шаблонов файла .gitignore

#git игнорирует пустые папки !!! -решение: в папку добавляется пустой файла
# стандартное название .keep
#иногда необходимо что бы даже пустая папка была создана заранее
# для примера папка log

--------------------------------------------------------------------------
#список доступных веток проекта и текущая
git branch

#если после git branch указать название - git создаст новую ветку

git branch feature

#переключение на новую ветку "feature" название ветки
git checkout feature
git checkout newbranch

#переименовать ветку параметр -m

git branch -m newbranch to_delete

#удаление ветки параметр -D

git branch -D to_delete

git log --pretty=format:"%h - %d %s %cd" --graph


#слияние веток - необходимо находиться в той ветке в которую будут вливать
#побочную ветку

git merge test
git log --pretty=format:"%h - %d %s %cd" --graph

------------------------------------------------------------------------
c:\dj>git merge test
Merge made by the 'ort' strategy.
 branch.txt   |  0
 git_help.txt | 22 ++++++++++++++++++++++
 2 files changed, 22 insertions(+)
 create mode 100644 branch.txt

c:\dj>git log --pretty=format:"%h -%d %s %cd" --graph
*   6c486d2 - (HEAD -> master) Merge branch 'test' Fri Jun 24 10:23:40 2022 +0300
|\
| * 3b53ae4 - (test) br2 Fri Jun 24 10:19:50 2022 +0300
| * 9bb6c8b - branch.txt Fri Jun 24 09:46:52 2022 +0300
* | e34c849 - new file master.txt Fri Jun 24 10:22:53 2022 +0300
|/
* d9112db - Shome issue happend Wed Jun 22 16:41:15 2022 +0300
* 3849263 - Last commit for Today 6 lessons Yahoo ! Wed Jun 22 16:40:25 2022 +0300
* eeff8d2 - Delete from Index to remove modification Wed Jun 22 15:35:51 2022 +0300
* f1b9de7 - 7th commit Wed Jun 22 15:19:34 2022 +0300
* 70957e0 - OK ! 6th Wed Jun 22 15:12:48 2022 +0300
* e1ddde7 - Update git_help.txt Wed Jun 22 14:41:15 2022 +0300
* ea0021c - Commit 4th Wed Jun 22 14:28:19 2022 +0300
* 4493030 - Final commit 3rd Wed Jun 22 14:15:38 2022 +0300
* f6cd415 - Эназер коммит ! смена редактора получилась !!! Wed Jun 22 13:59:29 2022 +0300
* 5e2aeca - Comment Wed Jun 22 13:53:53 2022 +0300
* 5392065 - Первый коммит Wed Jun 22 13:50:16 2022 +0300
-------------------------------------------------------------------------

#алиасы - создание сокращенной команды которая будет запускать более длинную
#сама команда в двойных кавычках содержимое если включает кавычки то одинарные
#можно прописать вручную !! в файле HOME$/.gitconfig (ex c:\Users\Pavlikov\.gitconfig)

git config --global alias.gitlog "log --pretty=format:'%C(yellow)%h%Creset - %C(green)%d%Creset %s %C(bold blue)(%cn) %C(green)%cd%Creset' --graph --date=format:'%d.%m.%Y %H:%M'"

.gitconfig ------------------------------------------------------------------------------
#проще писать вручную сразу в конфиг - нет гемороя с кавычками - кавычки экранируются: \"
[alias]
	last = log -1 HEAD
	gg = log --pretty=format:\"%C(yellow)%h%Creset - %C(green)%d%Creset %s %C(bold blue)(%cn) %C(green)%cd%Creset\" --graph --date=format:\"%d.%m.%Y %H:%M\"
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
-----------------------------------------------------------------------------------------
#разрешение конфликтов
#когда сливаются 2 конфликтных файла в текущей ветке создается файл содержащий внесенные
#все внесенные изменения - корректируется вручную - потом добавить в индекс и коммит

git checkout master
git merge test
#исправляем hello.php
git add .
git commit -m "Conflict solved"


#удаленный репозиторий !
1. регистрируемся ни github
2. в editprofile жмем + (право верх) выбираем settings
3. выбираем SSH ...
4. для винды через ssh-keygen генерим ключ (название не меняем тогда
он сохранится в $HOME\.ssh\id_rsa и id_rsa.pub) кодовое слово тож не надо
5. из id_rsa.pub - копируем весь текст и во вкладке github ssh - вставляем его
6. создаем репозиторий с доступным именем
7. в след окне про доступ к репозиторию нажимаем на SSH и получаем
консольные команды для загрузки по ssh:
git remote add origin git@github.com:grvsa/hello_one.git

тут origin это название ветки мастер я так понял - можно сменить на github к примеру
git remote add github git@github.com:grvsa/hello_one.git

после этого можем запулить весь репозиторий (ветка master соответственно)

git push github master

если хотим склонировать репозиторий то

git clone git@github.com:grvsa/hello_one.git

если по ошибке создали не тот origin то може удалить
git remote remove origin
проверка доступных
git remote -v
origin  https://github.com/grvsa/hello.git (fetch)
origin  https://github.com/grvsa/hello.git (push)

git remote
github
origin

эмулируем командную разработку

есть текущий dj
склонируем в другую папку c:\
git clone git@github.com:grvsa/hello_one.git
там создаем index.php
git add .
git commit -m "Commit"
git push github master

переходим в dj

создаем phpinfo.php
git add .
git commit -m "Commit"
git push origin master

c:\dj>git push origin master
Enter passphrase for key '/c/Users/pavlikov/.ssh/id_rsa':
To github.com:grvsa/hello_one.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'github.com:grvsa/hello_one.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

тк репозитории теперь не совпадают

поэтому делаем pull
git pull origin master

теперь index.php есть и в dj поэтому снова делаем push
git push origin master


# самое главное братцы мои !!! при git init никакая venv не создается
создается только папка с доками и настройками репозитория !
таким образом гит клиент дергает все данные из этих конфигов.
тобишь 2 папки могут сущестовать одновременно и что бы проверить статус
репозиториев нужно просто зайти в них и получить статус
git status !

для синхронизации соответственно будет git pull origin master

так же при клонировании удаленного репозитория и при загрузке на удаленный



захуярили изменения из дома !
создается папка .git
там внутри будет файл конфиг где и будет прописано расположение удаленного
репозитория.

#лекция 9 !
# создание удаленных веток в github репозитории

#список веток в удаленном репозитории:
git branch -r

#создаем новую ветку fix_error
git checkout -b fix_error
#список локальных веток - автоматом перешли в fix_error при создании
git branch
* fix_error
  master
  test

#закидываем ветку в удаленный репозиторий
git push origin fix_error

#список веток в удаленном репозитории :
git branch -r

github/master
origin/fix_error
origin/master

#теперь переименуем локальную ветку в другую - что будет с удаленным репозиторием ?
git branch -m fix_error to_delete
git branch

master
test
* to_delete

#в удаленном репозитории без изменений
git branch -r

github/master
origin/fix_error
origin/master

#можем отправить её на сервер
git push origin to_delete
git branch -r

github/master
origin/fix_error
origin/master
origin/to_delete

#удалим локальную ветку to_delete для этого переместимся на другую ветку
git checkout master
git branch -D to_delete
git branch

* master
  test

  git branch -r

github/master
origin/fix_error
origin/master
origin/to_delete

#короче - обычные команды не затрагивают удаленный репозиторий.
#что бы управлять ветками в удаленном репозитории используются другие команды
#Удаление - название ветки предваряют двоеточием :

git push origin :to_delete
git branch -r

To github.com:grvsa/hello_one.git
 - [deleted]         to_delete

 github/master
 origin/fix_error
 origin/master

 #переименовать ветку в удаленном репозитории сложно
 #поэтому делаем в несколько шагов
 - клон ветки в локальный репозиторий
 - переименование ветки в локальном репозитории
 - пуш ветки в удаленный репозиторий
 - удаление ветки со старым названием в удаленном репозитории

git branch to_delete origin/fix_error
git push origin to_delete
git push origin :fix_error


#сахар - если git bash то можно в командной строке показывать текущую ветку
#на винде в git-bash работает автоматом - список команд сделаем для ubuntu что бы повторить
#дома и протестить - по сути это bash скрипты

#создаем папку .bash в папке репозитория
mkdir .bash
cd bash

#теперь в эту папку необходимо клонировать репозиторий git-aware-prompt
#на сайте github ищем этот репозиторий и копируем ссылку
#в нашем случае ссылка нужна https а не ssh git@github.com:jimeh/git-aware-prompt.git
#ссылка ssh необходима если мы планируем вносить изменения в репозиторий
#для клонирования хватит и https ссылки https://github.com/jimeh/git-aware-prompt.git

git clone https://github.com/jimeh/git-aware-prompt.git

#теперь необходимо внести изменения в файл .bash_profile домашнего каталога
#этот файл будет загружаться автоматически при инициализации терминала

export PATH#/bin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:$PATH
source "~/.bash/git-aware-prompt/main.sh"
export PS1#"\w \[\$txtcyn]\$git_branch\[\$txtred\]\$git_dirty\[\$txtrst\]\$ "

#в unix системах PS1 отвечает за подсказки в коммандной строке
#теперь при переходе в папку репозитория этот скрипт подгрузится автоматом

#изменения можно сохранить не добавляя их в коммит
#к примеру если оно не финальное ! и необходима доработка
#в этом случае мы добавляем их в индекс
git add .

#но вместо коммита мы делаем
git stash
git stash list

git stash apply - вернуть изменения
git stash apply stash@{1} - вернуть определенное изменение
git stash drop - удалить все сохранения

#при этом откатываемся на старое стабильное состояние НО ! новые изменения не потеряны

#суть вот в чем.
#мы работали с одной веткой .. вносили в неё изменения - но они не рабочие к примеру
#теперь нам надо переключиться в другую ветку и возможно слить их
#это не получиться сделать так как в основной ветке нет коммита
#мы можем засунуть все текущие изменения в stash и откатить ветку до стабильного состояния
#после этого заниматься чем угодно во второй ветке.


#Урок 10 версионирование ! и тэги
#версии программы обычно состоят из 3х цифр 1.4.0
1: мажорная версия - сильно переписывается код
4: минорная версия - небольшие изменения
0: патч версия - закрываются критические ошибки

#история проекта состоит из цепочки коммитов с хэш кодами
#поиск по ним затруднителен - поэтому каждому состоянию может быть
#присвоен тэг для быстрого поиска.

git tag v1.3.0

#тэг можно снабдить комментарием

git tag -a v1.4.0 -m "Новый тэг"

#список тэгов
$ git tag
v1.3.0
v1.4.0

#можно отфильтровать тэги по шаблону * - любое количество символов

git tag -l v1.4*

#удаление тегов
git tag -d v1.4.0

$ git gg
* 084e708 -  (HEAD -> master, tag: v1.4.0, tag: v1.3.0) com (GRVSA Alex) 28.06.2022 15:43
* be327ad -  Text (GRVSA Alex) 28.06.2022 15:35
* 40d05bb -  upd (GRVSA Alex) 28.06.2022 14:49
* cb7f217 -  Help2 (GRVSA Alex) 28.06.2022 14:43
* 7814b4e -  help (GRVSA Alex) 28.06.2022 14:30
* f324afd -  (origin/to_delete, origin/master, to_delete) Commit fromhome ! (grvsa) 27.06.2022 19:27
* 66f69d8 -  finish for today 27.06.2022 (GRVSA Alex) 27.06.2022 16:47
*   a1ee0f9 -  Merge branch 'master' of github.com:grvsa/hello_one (GRVSA Alex) 27.06.2022 16:42
|\
| * ec6f17b -  текст урока 8 (GRVSA Alex) 27.06.2022 16:40
| *   172719d -  Merge branch 'master' of github.com:grvsa/hello_one (GRVSA Alex) 27.06.2022 16:17
| |\
| * | af439d4 -  phpinfo from DJ project ! not HELLO_ONE (GRVSA Alex) 27.06.2022 16:16
* | | 998e32a -  apdeqt repositoriya test.php iz hello_one (GRVSA Alex) 27.06.2022 16:42
| |/
|/|
* | 0efb6cb -  Index.php add to hello_one rep - NOT DJ (GRVSA Alex) 27.06.2022 16:13
|/
* a57613d -  (github/master) Last commit for 24.06.2022 lession git7 (GRVSA Alex) 24.06.2022 16:38
*   2d541b9 -  Conflict solved (GRVSA Alex) 24.06.2022 16:35
|\
| * 20e74c6 -  (test) Test branch hello.php (GRVSA Alex) 24.06.2022 16:32
* | 0e4185c -  Hello PHP (GRVSA Alex) 24.06.2022 16:30
* | 6c486d2 -  Merge branch 'test' (GRVSA Alex) 24.06.2022 10:23
|\|
| * 3b53ae4 -  br2 (GRVSA Alex) 24.06.2022 10:19
| * 9bb6c8b -  branch.txt (GRVSA Alex) 24.06.2022 09:46
* | e34c849 -  new file master.txt (GRVSA Alex) 24.06.2022 10:22
|/
* d9112db -  Shome issue happend (GRVSA Alex) 22.06.2022 16:41
* 3849263 -  Last commit for Today 6 lessons Yahoo ! (GRVSA Alex) 22.06.2022 16:40
* eeff8d2 -  Delete from Index to remove modification (GRVSA Alex) 22.06.2022 15:35
* f1b9de7 -  7th commit (GRVSA Alex) 22.06.2022 15:19
* 70957e0 -  OK ! 6th (GRVSA Alex) 22.06.2022 15:12
* e1ddde7 -  Update git_help.txt (GRVSA Alex) 22.06.2022 14:41
* ea0021c -  Commit 4th (GRVSA Alex) 22.06.2022 14:28
* 4493030 -  Final commit 3rd (GRVSA Alex) 22.06.2022 14:15
* f6cd415 -  Эназер коммит ! смена редактора получилась !!! (GRVSA Alex) 22.06.2022 13:59
* 5e2aeca -  Comment (GRVSA Alex) 22.06.2022 13:53
* 5392065 -  Первый коммит (GRVSA Alex) 22.06.2022 13:50


#на один коммит можно навесить сколько угодно тэгов

$ git show
commit 084e7080b64be679a2eb84e087dd727d57fd1517 (HEAD -> master, tag: v1.4.0, tag: v1.3.0)
Author: GRVSA Alex <grvsa1980@gmail.com>
Date:   Tue Jun 28 15:43:24 2022 +0300

    com

diff --git a/git_help.txt b/git_help.txt
index 25780f6..13391ea 100644
--- a/git_help.txt
+++ b/git_help.txt
@@ -620,5 +620,17 @@ git add .

 #но вместо коммита мы делаем
 git stash
+git stash list
+
+git stash apply - вернуть изменения
+git stash apply stash@{1} - вернуть определенное изменение
+git stash drop - удалить все сохранения

 #при этом откатываемся на старое стабильное состояние НО ! новые изменения не потеряны
+
+#суть вот в чем.
+#мы работали с одной веткой .. вносили в неё изменения - но они не рабочие к примеру
+#теперь нам надо переключиться в другую ветку и возможно слить их
+#это не получиться сделать так как в основной ветке нет коммита
+#мы можем засунуть все текущие изменения в stash и откатить ветку до стабильного состояния
+#после этого заниматься чем угодно во второй ветке.

pavlikov@DA-PC-N2 MINGW64 /c/dj (master)
$

#git самостоятельно предоставляет несколько дополнительных тэгов HEAD к примеру
# он указывает на последний коммит

$ git show HEAD
commit 084e7080b64be679a2eb84e087dd727d57fd1517 (HEAD -> master, tag: v1.4.0, tag: v1.3.0)
Author: GRVSA Alex <grvsa1980@gmail.com>
Date:   Tue Jun 28 15:43:24 2022 +0300

    com

diff --git a/git_help.txt b/git_help.txt
index 25780f6..13391ea 100644
--- a/git_help.txt
+++ b/git_help.txt
@@ -620,5 +620,17 @@ git add .

 #но вместо коммита мы делаем
 git stash
+git stash list
+
+git stash apply - вернуть изменения
+git stash apply stash@{1} - вернуть определенное изменение
+git stash drop - удалить все сохранения

 #при этом откатываемся на старое стабильное состояние НО ! новые изменения не потеряны
+
+#суть вот в чем.
+#мы работали с одной веткой .. вносили в неё изменения - но они не рабочие к примеру
+#теперь нам надо переключиться в другую ветку и возможно слить их
+#это не получиться сделать так как в основной ветке нет коммита
+#мы можем засунуть все текущие изменения в stash и откатить ветку до стабильного состояния
+#после этого заниматься чем угодно во второй ветке.

pavlikov@DA-PC-N2 MINGW64 /c/dj (master)
$

#тэг по умолчанию устанавливается на текущий коммит но можно установить и на любой
#для этого указывают хэш коммита в конце

git tag -a v1.2.0 -m "Old version" 66f69d8

$ git gg
* 084e708 -  (HEAD -> master, tag: v1.4.0, tag: v1.3.0) com (GRVSA Alex) 28.06.2022 15:43
* be327ad -  Text (GRVSA Alex) 28.06.2022 15:35
* 40d05bb -  upd (GRVSA Alex) 28.06.2022 14:49
* cb7f217 -  Help2 (GRVSA Alex) 28.06.2022 14:43
* 7814b4e -  help (GRVSA Alex) 28.06.2022 14:30
* f324afd -  (origin/to_delete, origin/master, to_delete) Commit fromhome ! (grvsa) 27.06.2022 19:27
* 66f69d8 -  (tag: v1.2.0) finish for today 27.06.2022 (GRVSA Alex) 27.06.2022 16:47
*   a1ee0f9 -  Merge branch 'master' of github.com:grvsa/hello_one (GRVSA Alex) 27.06.2022 16:42


#ВНИМАНИЕ ! по умолчанию git push не отправляет тэги в удаленный репозиторий
#их необходимо указывать явно !

git push origin v1.2.0

#если тегов много можно загрузить их все через параметр
git push origin --tags

#что бы запросить тэги на удаленном сервере используем команду
$ git ls-remote --tags origin
Enter passphrase for key '/c/Users/pavlikov/.ssh/id_rsa':
30e49ad179a772e846d78b32af2cac7143fdd28a        refs/tags/v1.5.0

#удалить тэг на удаленном сервере так же как и ветку
git push origin :v1.2.0


#git 11 слияние веток. Создаем ветку feature вносим в неё изменения.
#переключаемся в ветку master. Вносим изменения в неё тоже.
#теперь нам надо применить изменения из master в feature



-----------------------------------------------------------------------
$ git branch
* master
  old_version_of_project
  test
  to_delete

pavlikov@DA-PC-N2 MINGW64 /c/dj (master)
$ git branch -D test
Deleted branch test (was 20e74c6).

pavlikov@DA-PC-N2 MINGW64 /c/dj (master)
$ git branch -D old_version_of_project
Deleted branch old_version_of_project (was 66f69d8).

pavlikov@DA-PC-N2 MINGW64 /c/dj (master)
$ git branch
* master
  to_delete

pavlikov@DA-PC-N2 MINGW64 /c/dj (master)
$ git branch -D to_delete
Deleted branch to_delete (was f324afd).

pavlikov@DA-PC-N2 MINGW64 /c/dj (master)
$ git branch
* master
-------------------------------------------------------------------

git checkout -b feature
#сразу закидываем на сервер и потом создадим коммит
git push origin feature

#изменяем readme.txt и делаем коммит
#преключаемся в master изменяем hello.txt и делаем коммит
#вносим изменения в ветку feature из master
git checkout feature
git merge master

-------------------------------------------------------------------
pavlikov@DA-PC-N2 MINGW64 /c/dj (feature)
$ git gg
*   c1afec8 -  (HEAD -> feature) Merge branch 'master' into feature (GRVSA Alex) 29.06.2022 11:19
|\
| * 21ec8fb -  (master) new line in help.txt - master branch (GRVSA Alex) 29.06.2022 11:19
* | 4e2135e -  New line in readme.txt - feature (GRVSA Alex) 29.06.2022 11:17
|/
* 6047c04 -  (tag: v1.6.0, origin/master, origin/feature) Finish 28.06.2022 next lesson 11 (GRVSA Alex) 28.06.2022 16:33
* 30e49ad -  (tag: v1.5.0) Last ? (GRVSA Alex) 28.06.2022 16:22
* 084e708 -  (tag: v1.4.0, tag: v1.3.0) com (GRVSA Alex) 28.06.2022 15:43
* be327ad -  Text (GRVSA Alex) 28.06.2022 15:35
------------------------------------------------------------------

#можно поступить по другому и переметить ветку feature на из предыдущего коммита ветки
#мастер в последний коммит ветки мастер

git rebase master

#перенос коммита (cherry-pick) тобишь в ветках несколько коммитов прошло
#ветки сливать нельзя.
#необходимо слить определенный - не последний коммит в другую ветку
#в команде последний параметр это hash коммита

git cherry-pick hash

#если будет проблема с версиями то сперва нужно исправить проблемный файла
#добавить его в индекс и потом продолжить cherry-pick
git add .
git cherry-pick --continue

#есть вариант с объединением нескольких коммитов в один.

#проверить различие веток можно с помощью команды из текущей ветки сравниваем другую
git cherry -v master


#сделаем еще парочку в ветке feature
------------------------------------------------------------------
pavlikov@DA-PC-N2 MINGW64 /c/dj (feature)
$ git cherry -v master
- ab17ff98db64f575f6a4910f915a40c093f19c55 cherry-pick in readme.txt
+ 0f41c327478de892f183216f31d36359c70dbbbb second commit for cherry-pick
+ a20bd3cab26009453d61312ab658422c93eaa183 First commit
+ 9a51ea58b3136ddb3a0a6bbee79e5819f6ac6a2b Second commit
+ 5ce1a3445425357c085416b0bd0bf57409455be6 Third commit
------------------------------------------------------------------

git show HEAD -показывает последний коммит
git show HEAD~3 -показывает с последнего до последний -3

#объединение коммитов
git rebase -i HEAD~3

#результат это окно со списком коммитов - те которые необходимо объединить
#помечаются как squash которые нет остаются pick
#далее закрываем окно редактора и процесс продолжается
#выскакивает окно с комментом для коммита

#ветку с объединеными коммитами уже нельзя впихнуть на сервер выпадет ошибка
#поэтому ветка перезаписывается принудительно: параметры -f или --force
git push origin feature --force


# SSH Secure Shell - клиентсерверный протокол
#предполагается что на удаленном хосте стоит сервер

обращение к удаленному серверу
ssh 46.36.218.162
ssh root@46.36.218.162
exit - выход с удаленной машины

после первого соединения в папке .ssh создается known_hosts

можно не устанавливать сеанс а сразу предать командну
ssh root@46.36.218.162 uptime

если команда содержит пробелы - необходимо заключить её в кавычки

указание порта (3306 мускл 80 нттр 22 ssh)
ssh -p 2222 root@46.36.218.162

в папке .ssh можно создать файл config в котором будет описание сокращенного
имени хоста
Host node1
Hostname 46.36.218.162
Port 22
User root

после этого коннектиться можно
ssh node1

cat id_rsa.pub -открытый ключ - загружается на сервер и добавляется там в authorized_keys
id_rsa - закрытый ключ - никуда не передается

дозаписать в файл
echo "skjljfjskljrewljgeklrje какая то хуйня" >> authorized_keys

ssh-add - для текущей сессии добавить пароль на ключ
после этой команды можно на сервер входить без пароля вообще
